#include<bits/stdc++.h>
using namespace std;

// This code is written by Anurag Mishra
// Time complexity : O(N^2) when the tree is skewed.

int search(char inorder[], char value, int start, int end)
{
    int i;
    for(i = start; i <= end; i++)
    {
        if(inorder[i] == value)
            return i;
    }
}
TreeNode* constructTree(char inorder[], char preorder[], int inStart, int inEnd)
{
    if(inStart > inEnd)
        return  NULL;
    
    static int first = 0;
    
    TreeNode* root  = newNode(preorder[first++]);
    
    if(inStart == inEnd)
        return root;
    
    int index =  search(inorder, root->data, inStart, inEnd);
    
    root->left = constructTree(inorder, preorder, inStart, index - 1);
    root->right = constructTree(inorder, preorder, index + 1, inEnd);
    
    return root;
    
    /*
    
    char inorder[] = { 'D', 'B', 'E', 'A', 'F', 'C' }; 
    char preorder[] = { 'A', 'B', 'D', 'E', 'C', 'F' }; 
    */
}

===============Efficient Solution===============

Expected TC: O(N), here unordered_map is used, we basically stored all the indexes of inorder in a hashmap whose look up time is constant, i.e O(1).


TreeNode* constructTree(char inorder[], char preorder[], int start, int end, unordered_map<char, int> &mp) {
    
    static int fix = 0;
    
    
    if(start > end)
        return NULL;
        
    char curr = preorder[fix++];
    TreeNode* root = newNode(curr);
    
    if(start == end)
        return root;
        
    int index = mp[curr];
    
    root->left = constructTree(inorder, preorder, start, index - 1, mp);
    root->right = constructTree(inorder, preorder, index + 1, end, mp);
    
    return root;
}


TreeNode* buildWrapper(char inorder[], char preorder[], int len)
{
    unordered_map<char, int> mp;
    
    // store all the elements in a hashmap so that we can easily view the index of that element.
    for(int i = 0; i < len; i++)
        mp[inorder[i]] = i;
    return constructTree(inorder, preorder, 0, len - 1, mp);
}  




