#include<bits/stdc++.h>
#include<string>
using namespace std;

#define fastIO ios_base::sync_with_stdio(false);cin.tie(NULL); cout.tie(NULL);
#define ll long long
const ll MOD  = 1000000007;

#define N 10


bool isSafe(int mat[N][N], int i, int j, bool visited[N][N])
{
	return (i >= 0  && j >= 0 &&  i < N && j < N && mat[i][j] == 1 && !visited[i][j]);
}


int shortestPathUtil(int mat[N][N], int i, int j, int x, int y, bool visited[N][N])
{
	if (!isSafe(mat, i, j, visited))
		return 1000007;

	if (i == x && j == y)
		return 0;

	visited[i][j] = true;

	int left = shortestPathUtil(mat, i, j - 1, x, y, visited ) + 1;
	int bottom = shortestPathUtil(mat, i + 1, j, x, y, visited ) + 1;
	int right = shortestPathUtil(mat, i, j + 1, x, y, visited ) + 1;
	int top = shortestPathUtil(mat, i - 1, j, x, y, visited ) + 1;



// Main line due to which backtracking works.
	visited[i][j] = false;

	return min(min(left, bottom), min(top, right));
}



int main()
{
	fastIO

#ifndef ONLINE_JUDGE
	freopen("intput.txt",  "r", stdin);
	freopen("output.txt",  "w", stdout);
#endif

	int mat[N][N] =
	{
		{ 1, 1, 1, 1, 1, 0, 0, 1, 1, 1 },
		{ 0, 1, 1, 1, 1, 1, 0, 1, 0, 1 },
		{ 0, 0, 1, 0, 1, 1, 1, 0, 0, 1 },
		{ 1, 0, 1, 1, 1, 0, 1, 1, 0, 1 },
		{ 0, 0, 0, 1, 0, 0, 0, 1, 0, 1 },
		{ 1, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
		{ 0, 0, 0, 0, 1, 0, 0, 1, 0, 1 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 0 },
		{ 1, 1, 1, 1, 1, 0, 0, 1, 1, 1 },
		{ 0, 0, 1, 0, 0, 1, 1, 0, 0, 1 },
	};

	bool visited[N][N];
	memset(visited, false, sizeof(visited));

	cout << shortestPathUtil(mat, 0, 0, 8, 0, visited);
	return 0;
}
