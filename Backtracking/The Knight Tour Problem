#include <bits/stdc++.h> 
using namespace std; 
 
#define N 8
int xMove[8] = { 2, 1, -1, -2, -2, -1, 1, 2 }; 
int yMove[8] = { 1, 2, 2, 1, -1, -2, -2, -1 }; 
  
bool isSafe(int x, int y, int sol[N][N]) 
{ 
    return (x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1); 
} 
  
void printSolution(int sol[N][N]) 
{ 
    for (int x = 0; x < N; x++) 
    { 
        for (int y = 0; y < N; y++)
        	cout << sol[x][y] <<" ";
        cout << endl; 
    } 
} 


int solveKTUtil(int x, int y, int movei, int sol[N][N]) 
{ 
    if (movei == N*N) 
        return 1; 
      
    for (int k = 0; k < 8; k++) 
    { 
    
        if (isSafe(x + xMove[k], y + yMove[k], sol)) 
        { 
            sol[x + xMove[k]][y + yMove[k]] = movei; 
            if (solveKTUtil(x + xMove[k], y + yMove[k],  movei + 1, sol) == 1) 
                return 1; 
            else
                sol[x + xMove[k]][y + yMove[k]] = -1; 
        } 
    } 
    return 0; 
} 
  
// Driver Code 
int main() 
{
	int sol[N][N]; 
    memset(sol, -1, sizeof(sol));
    
   
    sol[0][0] = 0; 

    if (solveKTUtil(0, 0, 1, sol) == 0) 
    { 
        cout << "Solution does not exist"; 
        return 0; 
    } 
    else
        printSolution(sol); 

    return 0; 
} 
