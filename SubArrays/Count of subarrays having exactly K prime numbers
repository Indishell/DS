#include<bits/stdc++.h>
using namespace std;

#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define ll long long
const ll MOD = 1e9 + 7;

bool isPrime(int n)
{
	if (n <= 1)	return false;

	if (n <= 3) 	return true;

	if (n % 2 == 0 || n % 3 == 0)
		return false;

	for (int i = 5; i <= sqrt(n); i = i + 6)
	{
		if (n % i == 0 || n % (i + 2) == 0)
			return false;
	}
	return true;
}


int subarray(int A[], int N, int K)
{
	int currSum = 0;
	int count = 0;

	unordered_map<int, int> mp;
	for (int i = 0; i < N; i++)
	{
		currSum += A[i];

		if (currSum == K)
			count++;

		if (mp.find(currSum - K) != mp.end())
			count += mp[currSum - K];

		mp[currSum]++;
	}
	return count;
}


void countSubarrays(int A[], int N, int K)
{
	for (int i = 0; i < N; i++)
	{

		if (isPrime(A[i]))
			A[i] = 1;

		else
			A[i] = 0;
	}

	cout << subarray(A, N, K);
}

int main()
{

	fastIO

	int A[] =  {1, 2, 3, 4};
	int N = sizeof(A) / sizeof(int);


	int K = 2;
	countSubarrays(A, N,  K);
}
