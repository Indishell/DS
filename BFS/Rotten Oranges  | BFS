#include <bits/stdc++.h>
using namespace std;

#define fastIO ios_base :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define ll long long
const ll MOD = 1000000009;

#define r 3
#define c 3

static int xdir[] = {0, -1, 0, 1};
static int ydir[] = { -1, 0, 1, 0};


bool isValid(int mat[][c] , int i, int j)
{
	return (i >= 0 && i < r && j >= 0 && j < c && mat[i][j] == 1);
}


int minimumTime(int mat[][c])
{
	queue< pair<int, int> > mq;

	bool visited[r][c] = {false};

	int time = -1, fresh = 0;

	for (int i  = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			if (mat[i][j] == 2)
				mq.push(make_pair(i, j));

			else if (mat[i][j] == 1)
				fresh++;
		}
	}
	if (fresh == 0)
		return -1;

	while (!mq.empty())
	{

		int size = mq.size();

		while (size--)
		{

			int x = mq.front().first;
			int y = mq.front().second;
			mq.pop();

			for (int k = 0; k < 4; k++)
			{

				int p = x  + xdir[k];
				int q = y  + ydir[k];

				// Perform Following checks then only enque indicies.
				// 1. Check if index (i, j) is a valid index and in the matrix.
				// 2. If 1st condition is fullfilled check if it is 1
				// 3. If 2nd condition is fullfilled, check if it not present in our visited matrix

				if (isValid(mat, p, q) && mat[p][q] == 1 && !visited[p][q])
				{
					mat[p][q] = 2;
					mq.push(make_pair(p, q));
					fresh--;
					visited[p][q] = 2;
				}
			}
		}
		time++;
	}

	return time != -1 ? time : -1;
}


int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	int mat[r][c] = {
		{2, 1, 1},
		{1, 1, 0},
		{0, 1, 1}
	};


	cout << minimumTime(mat);
}
