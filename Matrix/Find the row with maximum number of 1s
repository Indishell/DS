#include<bits/stdc++.h>
using namespace std;

#define  fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define ll long long
const ll MOD = 1000000007;

#define R 4
#define C 4

Time Complexity : O(R*C), R -> Number of row, C -> Number of Columns
int countOneRow(int mat[][C])
{
	int count = 0;
	int row = 0;

	int maxM = INT_MIN;
	int i = 0, j = 0;

	for (i = 0; i < R; i++)
	{
		count = 0;
		for (j = 0; j < C; j++)
		{
			if (mat[i][j] == 1)
				count++;
		}
		if (maxM < count)
		{
			maxM = count;
			row = i;
		}

	}

	return row;

}

int binarySearch(int A[], int low, int high)
{
	if (low > high)
		return -1;

	while (low <= high)
	{
		int mid = low + (high - low) / 2;

		if (A[mid] == 1 && A[mid] == A[mid - 1])
			high = mid - 1;

		else
			low = mid + 1;
	}

	return low - 1;
}


// TIme COmplexity is O(numberofrows * log(number of columns))
// TC: O(R Log(C))
int countOneRow(int mat[][C])
{
	int row = 0, count  = 0, maxM = INT_MIN;

	int i = 0, j = 0;

	for (i = 0; i < R; i++)
	{

		int index = binarySearch(mat[i], 0, C - 1);
		count = C - index;

		if (count > maxM)
		{
			maxM = count;
			row = i;
		}
	}


	return row ;

}



int countOneRow(int mat[][C])
{
	int row = 0;

	int j = binarySearch(mat[0], 0, C - 1);

	if (j == 1)
		j = C - 1;

	for (int i = 1; i < R; i++)
	{
		while (j >= 0 && mat[i][j] == 1)
		{
			j = j - 1;
			row = i;
		}
	}
  	return row;

}


int  main()
{

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	fastIO

	int mat[R][C] =
	{
		{0, 1, 1, 1},
		{0, 0, 1, 1},
		{1, 1, 1, 1},
		{0, 0, 0, 0}
	};


	cout << countOneRow(mat);


	return 0;
}
