

// Create a Min heap and remove the minimum element k times.
// Time taken to create a heap of => O(n)
//Time Complexity : O(n + kLogn)
        
 /*
 Algorithm:
 
 1. Make a Minheap and insert all elements of array.
 2. Now for kth smallest element, remove root element k times and each time after removing call heapify(0) because maybe heap property may get violated.
 3. After removing (k - 1) items from MinHeap, Basically simple return nthe root element by harr[0] in this case.

 */


#include<bits/stdc++.h>
using namespace std;

void swap(int *x, int *y)
{
    int temp  = *x;
    *x = *y;
    *y = temp;
}

class MinHeap
{
    int *harr;
    int capacity;
    int heapSize;

    public:
        MinHeap(int A[], int size);
        void MinHeapify(int i);

        int left(int i) {return (2*i + 1);}
        int right(int i) {return (2*i + 2);}
        int parent(int i) {return (i - 1)/2;}
        // Removes Minimum(Root) element from Heap
        int extractMin();
        int getMin() {return harr[0];}
};

MinHeap:: MinHeap(int A[], int size)
{
    heapSize = size;
    harr = A;
    int i = (heapSize - 1)/2;

    while(i >= 0)
    {
        MinHeapify(i);
        i--;
    }

        
}

int MinHeap:: extractMin()
{
    if(heapSize == 0)
        return INT_MAX;

    int root = harr[0];
    if(heapSize > 1)
    {
        harr[0] = harr[heapSize - 1];
        MinHeapify(0);
    }
    heapSize--;

    return root;
}

void MinHeap :: MinHeapify(int i)
{
    int l  = left(i);
    int r = right(i);
    int smallest = i;
    
    if(l < heapSize && harr[l] < harr[i])
        smallest = l;

    if(r < heapSize && harr[r] < harr[smallest])
        smallest = r;

    if(smallest != i)
    {
        swap(&harr[i], &harr[smallest]);
        MinHeapify(smallest);
    }
}

int KthSmallest(int arr[], int n, int k)
{
    MinHeap mp(arr, n);
    for(int i = 0; i < k - 1; i++)
        mp.extractMin();

    return mp.getMin();
}

int main()
{
    int arr[] = {7, 10, 4, 3, 20, 15};
    int n =sizeof(arr)/sizeof(int);

    cout<< "Kth Largest element is " << KthSmallest(arr, n, 2);
    return 0;
}


