#include<bits/stdc++.h>

using namespace std;


string reverse(string str)
{
    int start =  0, end = str.size() - 1;
    
    while( start  < end)
    {
        char c = str[start];
        str[start] = str[end];
        str[end] = c;
        
        start++;
        end--;
    }
    
    return str;
}

string reverseWords(string str)
{
    string p = reverse(str);
    
    int start = 0; 
    
    for(int i = 0; i <= p.size(); i++)
    {
        if(p[i] == ' ' || i == p.size() )
        {
            
            int end = i - 1;
            
            while(start < end)
            {
                swap(p[start], p[end]);
                start++;
                end--;
                
            }
            
            start = i + 1;
        }
        
    }
    
    return p;
}





Solution : 2

// Another Stack Based Approach, 
// Basically initialize a new string example
//string p = "";
// loop through the given string to be revered, and for each character if it is not space or special character
//push it in the stack.

//henever we encounter a special character , simply ignore and start popping the stack and push the popped item in to the new string 
and at last there is a stack which has elements in it, at last start popping from the stack and push it again  in to the string.


// At last reverse our string p;

string reverseWord(string mystr)
{
    stack<char> ms;
    string p = "";
    for(int i = 0 ; i < mystr.size(); i++)
    {
        if(mystr[i] != ' ')
            ms.push(mystr[i]);
            
        else
        {
            while(!ms.empty()){
                p.push_back(ms.top());
                ms.pop();
              }
            
            p.push_back(' ');
        }
    }

    
    while(!ms.empty())
    {
        p.push_back( ms.top() );
        ms.pop();
    }

    reverse(p);
    
    return p;

}

























