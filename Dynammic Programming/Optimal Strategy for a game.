#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define take_input freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
const ll MOD = 1e9 + 7;
#define pb push_back
vector<int> v;
vector<vector<int> > ans;

int dp[1002][1002];

/*

					   Player    Opponent

6, 1, 4, 9, 8, 5        6
1, 4, 9, 8, 5                      5
1, 4, 9, 8              8
1, 4, 9                            9
1, 4                    4
1                                  1
-----------------------------------------
                     18 coins   15 coins



if i == j:
	return A[i]

if  i + 1 == j

	return max(A[i], A[j]);

player1 = max(a[i] + min( F(A, i + 1, j - 1), F(A, i +  2, j )),
 			  a[j]  +  min( F(A,i + 1, j - 1), F(A, i, j - 2)); 		*/

int solve(int A[], int i, int j)
{

	if (j == i)
		return A[i];

	if (dp[i][j] != -1)
		return dp[i][j];

	if (i + 1 == j)
		return max(A[i], A[j]);

	int first_move = A[i] + min( solve(A, i + 2, j) , solve(A, i + 1, j - 1));
	int second_move = A[j]  + min( solve(A, i + 1, j - 1), solve(A, i, j - 2));

	return dp[i][j] = max(first_move, second_move);
}


int main()
{
	take_input

	// int A[] = { 4, 6, 2, 3 };
	int A[] = {6, 1, 4, 9, 8, 5};
	int n = sizeof(A) / sizeof(int);

	memset(dp, -1, sizeof(dp));
	cout << solve(A, 0, n - 1);
	return 0;
}
