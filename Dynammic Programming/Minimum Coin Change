
Recursion + Memoisation

ll solve(ll coins[], ll n, ll amount) 
{
	if(amount == 0)
		return 0;
		
	if(amount < 0)
		return INT_MAX;
		
	if(dp[amount] != -1)
		return dp[amount];
	
	ll ans = INT_MAX;
		
	for(int i = 0; i < n; i++)
	{
		ll result = solve(coins, n, amount - coins[i]);
		
		if(result != INT_MAX)
			ans = min(ans, result + 1);
	}
	
	return dp[amount] = ans;
}


-----------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) 
    {
      int n = coins.size();
      
      if(n == 0 || amount == 0)
        return 0;
      
      int dp[n + 1][amount + 1];
      
      dp[0][0] = 0;
      
      for(int i = 1; i <= amount; i++)
        dp[0][i] = INT_MAX/2;
      
      
      for(int i = 1; i <= n; i++)
        dp[i][0] = 0;
      
      
      for(int i = 1; i <= n; i++)
      {
        for(int j = 1; j <= amount; j++)
        {
          if(j >= coins[i - 1])
            dp[i][j] = min(dp[i - 1][j], dp[i][j - coins[i- 1]] + 1);
          
          else
            dp[i][j] = dp[i - 1][j];
        }
      }
        
      return (dp[n][amount] != INT_MAX/2) ? dp[n][amount] : -1;
    }
};
