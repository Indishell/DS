#include<bits/stdc++.h>
using namespace std;

int dp[101][101][101];

#define r 4
#define c 4

------------------------------------------------------------------------------------------------------------------

Recursive Solution 
Time Complexity is O(3^n)

int solve(int mat[][c], int cost, int i, int j)
{
	if (cost < 0)
		return 0;

	if (i == 0 && j == 0 && cost - mat[0][0] == 0)
		return 1;

	if (i == 0 && j == 0)
		return 0;

	if (i == 0)
		return solve(mat, cost - mat[i][j], 0, j - 1);

	if (j == 0)
		return  solve(mat, cost - mat[i][j], i - 1, 0);

	return  solve(mat, cost - mat[i][j], i - 1, j) + solve(mat, cost - mat[i][j], i, j - 1);
}

--------------------------------------------------------------------------------------------------------------------

//Memoization Time Complexity is (row*col*cost)

int dp[101][101][101];

int solve(int mat[][c], int cost, int i, int j)
{
	if (cost < 0)
		return 0;

	if (i == 0 && j == 0 && cost - mat[0][0] == 0)
		return 1;

	if (i == 0 && j == 0)
		return 0;

	if (dp[i][j][cost] != -1)
		return dp[i][j][cost];

	if (i == 0)
		return dp[i][j][cost] =  solve(mat, cost - mat[i][j], 0, j - 1);

	if (j == 0)
		return dp[i][j][cost] =  solve(mat, cost - mat[i][j], i - 1, 0);

	return dp[i][j][cost] =  solve(mat, cost - mat[i][j], i - 1, j) + solve(mat, cost - mat[i][j], i, j - 1);
}


int main()
{
	take_input

	int mat[r][c] = {
		{4, 7, 1, 6},
		{5, 7, 3, 9},
		{3, 2, 1, 2},
		{7, 1, 6, 3}
	};

	int cost = 25;

	memset(dp, -1, sizeof(dp));

	cout << solve(mat, cost, r - 1, c - 1);

	return 0;
}
