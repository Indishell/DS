#include <bits/stdc++.h> 
using namespace std; 

#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define ll long long
#define pb push_back
const int MOD = 1e9 + 7;

/*
===========Algorithm============
1. Create a temp array , i.e DP Array of Size N.
2. A Single Odd element is have a length of 1.
3. Now, check for each and every element is, and update it for each odd element if it greater than any previous odd element then update its size, and then check again till the end of the Array.
4. Finally, Return the elment with highest element of the temp array, because the maxmimum element is having highest ellement is length of longest increasing odd sequence.
*/

void LOS(int A[], int N)
{
    int dp[N];
    
    for(int i = 0; i < N; i++)
            dp[i] = 1;

    
    
    for(int i = 1; i < N; i++)
    {
        for(int j = 0; j < i; j++)
        {
            if(A[i]%2 != 0  && A[i] > A[j] && dp[i] < dp[j] + 1)
                dp[i] = dp[j] + 1;
        }
    }

    for(int i =0  ; i < N;  i++)
        cout<< dp[i] <<" ";
        
}



int main()
{
    fastIO;
    
    int A[] = {50, 3, 10, 7, 40, 80, 17, 11 , 23};
    int N = sizeof(A)/sizeof(int);
    
    
    LOS(A, N);
    
    return 0;
}
