#include <bits/stdc++.h>
using namespace std;

#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define ll long long
#define pb push_back

const int MOD = 1e9 + 7;

static bool dp[1000][1000];


// 3, 34, 4, 12, 5, 2


bool subSetSum(int A[], int N, int sum)
{
	memset(dp, false, sizeof(dp));


	// If sum == 0 and N != 0, then it is possible
	if (sum == 0)
		return true;

	// But if our array is empty then ofcourse our sum will be zero,
	if (sum != 0 && N == 0)
		return false;

	// Now we have two choices
	// 1. Include a number(in this ww move forward and also upadte the sum by subtracting it. sum - A[N - 1], in recursion we always start from top to bottom)
	// 2. Exclude a number, (in this we just move forward and dont do anything else)
	if (A[N - 1] > sum)
		return dp[N][sum] = subSetSum(A, N - 1, sum);

	return  dp[N][sum] = (subSetSum(A, N - 1, sum - A[N - 1]) || subSetSum(A, N - 1, sum));
}



int main()
{

#ifndef ONLINE_JUDGE

	freopen("input.txt", "r" , stdin);
	freopen("output.txt", "w" , stdout);
#endif

	int A[] = {3, 34, 4, 12, 5, 2};
	int sum = 1;

	int N = sizeof(A) / sizeof(int);


	if (subSetSum(A, N, sum))
		cout << "Subset is Possible";
	else
		cout << "Subset is Not possible";

	return 0;
}
