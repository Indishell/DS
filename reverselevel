#include<stdio.h>
#include<stdlib.h>

struct Node
{
    int data;
     struct Node* left;
     struct Node* right;
};

struct  Node* newNode(int data);
int getHeight(struct Node* root);
void printGivenLevel(struct Node* root, int level);

void reverseLevelOrder(struct Node* root)
{
    int h =  getHeight(root);
    int i;
    for(i = h ; i > 0; i--)
        printGivenLevel(root, i);
    
}


void printGivenLevel(struct Node* root, int level)
{
    if(root == NULL)
        return 0;
        
    if(level == 1)
        printf("%d ", root->data);
        
    
    else if( level > 1)
    {
        printGivenLevel(root->left, level - 1);
        printGivenLevel(root->right, level - 1);
    }
}



struct  Node* newNode(int data)
{
    struct Node* new_node =  (struct Node*)malloc(sizeof(struct Node));
    
    new_node->data = data;
    new_node->right = NULL;
    new_node->left = NULL;
    
    return new_node;
}

int getHeight(struct Node* root)
{
    if(root == NULL)
        return 0;
        
    int lheight = getHeight(root->left);
    int rheight = getHeight(root->right);
    
    if(lheight > rheight)
        return(lheight + 1);
    else
        return(rheight + 1);
}



int main()
{
    struct Node* root = newNode(1); 
    root->left        = newNode(2); 
    root->right       = newNode(3); 
    root->left->left  = newNode(4); 
    root->left->right = newNode(5); 
  
    printf("Level Order traversal of binary tree is \n"); 

    reverseLevelOrder(root);

    return 0;
}
