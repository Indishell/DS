#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define pb push_back
const int MOD = 1e9 + 7;

#define r 6
#define c 6

void addEdge(vector<int> adj[], int u, int v)
{
	adj[u].pb(v);
}


void printDegree(vector<int> adj[], int n)
{
	vector<int> in(n, 0);
	vector<int> out(n, 0);

// Outdegree
	for (int i = 0; i < n; i++)
	{
		int temp = adj[i].size();
		out[i] = temp;
	}

// In Degree

	for (int i = 0; i  < n; i++)
	{
		for (int j = 0; j < adj[i].size(); j++)
		{
			int adjacencylistNode = adj[i][j];

			in[adjacencylistNode]++;
		}
	}

	cout << "Indegree : ";
	for (int i = 0; i < n; i++)
		cout << in[i] << " ";

	cout << "\n";

	cout << "OutDegree : ";
	for (int i = 0; i < n; i++)
		cout << out[i] << " ";

}


int main()
{

#ifndef ONLINE_JUDGE
	freopen("intput.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	// 1 Apply flood fill on extreme borders when an element is 0, change that element to '-'.
	// 2. After doing so , Conver all '-' to 'O' and convert all the 'O' to 'X';
	int V = 5;
	vector<int> adj[V];

	addEdge(adj, 0, 1);
	addEdge(adj, 0, 4);
	addEdge(adj, 1, 2);
	addEdge(adj, 1, 3);
	addEdge(adj, 1 , 4);
	addEdge(adj, 2, 3);
	addEdge(adj, 3, 4);

	printDegree(adj, V);
}
