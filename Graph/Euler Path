#include<bits/stdc++.h>
using namespace std;

unordered_map<int, vector<int>> adj;
#define V 5
#define pb push_back

void dfs(int node, vector<bool> &vis)
{
    vis[node] = true;
    
    for(int child : adj[node])
    {
        if(vis[child] == false)
            dfs(child, vis);
    }
}

bool connectedGraph()
{
    vector<bool> vis(V + 1, false);
    int node = -1;
    
    for(int i=0; i<V; i++)
    {
        if(adj[i].size() > 0)
        {
            node = i;
            break;
        }
    }
    
    if(node == -1)  return true;
    
    dfs(node, vis);
    
    for(int i=0; i<V; i++)
    {
        if(vis[i] == false and adj[i].size() > 0)
            return false;
    }
    return true;
}

int solve()
{
    if(!connectedGraph())
        return 0;
        
    int oddCount =0 ;
    
    for(int i=0;i<V;++i)
        if(adj[i].size() & 1)
            oddCount+=1;
            
    if(oddCount > 2)
        return 0;
        
    return (oddCount == 0) ? 2 : 1;
}

void findEulerPath()
{
    int ans = solve();
    
    if(ans == 0)
        std::cout << "Graph is not a Euler graph" << std::endl;
        
    else if(ans == 1)
        std::cout << "Graph is Semi Eulerian" << std::endl;
        
    else
        std::cout << "Graph is Eulerian" << std::endl;
}


int main()
{
    adj[0].pb(1);
	adj[1].pb(0);
	adj[0].pb(2);
	adj[2].pb(0);
	adj[2].pb(1);
	adj[1].pb(2);
	adj[0].pb(3);
	adj[3].pb(0);
	adj[3].pb(4);
	adj[4].pb(3);
	
	findEulerPath();
	
	
	return 0;

}
