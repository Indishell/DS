#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


class Graph
{
	public:

	// An array of vectors to represent adjacency list
	vector<vector<int>> adj;

	// Constructor
	Graph(vector<pair<int, int>> const &edges, int N)
	{
		// resize the vector to N elements of type vector<int>
		adj.resize(N);

		// add edges to the directed graph
		for (auto &it: edges) {
			adj[it.first].push_back(it.second);
		}
	}
};

// Function to perform DFS Traversal
void DFS(Graph const &graph, int v, vector<bool> &visited)
{
    visited[v] = true;
    
    for(int it  : graph.adj[v])
    {
        if(!visited[it])
            DFS(graph, it, visited);
    }

}

bool check(Graph const& graph, int N)
{
	vector<bool> visited(N);

	int v = 0;
	
	DFS(graph, v, visited);
	
	if(find(visited.begin(), visited.end(), false) != visited.end())
	    return  false;
	    
	
	fill(visited.begin(), visited.end(), false);
	
	vector< pair<int, int>> edges;
	
	for(int i =0 ; i < N; i++)
	{
	    for(int j : graph.adj[i])
	        edges.push_back({j, i});
	}
	
	Graph gr(edges, N);
	DFS(gr, v, visited);
	
	if(find(visited.begin(), visited.end(), false) != visited.end())
	    return false;
	    
	return true;   


}

// main function
int main()
{
	// vector of graph edges as per above diagram
	vector<pair<int, int>> edges = {
		{0, 4}, {1, 0}, {1, 2}, {2, 1}, {2, 4},
		{3, 1}, {3, 2}, {4, 3}
	};

	// Number of nodes in the graph
	int N = 5;

	// create a graph from given edges
	Graph graph(edges, N);

	// check if graph is not strongly connected or not
	if (check(graph, N))
		cout << "Graph is Strongly Connected";
	else
		cout << "Graph is not Strongly Connected";

	return 0;
}
