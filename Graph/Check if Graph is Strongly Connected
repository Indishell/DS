#include <bits/stdc++.h>
using namespace std;

vector<int> adj[100001];	
vector<int> radj[100001];
int vis[100001];

void dfs(int node, vector<int> p[]) 
{
	vis[node] = 1;
	
	for(int child : p[node])
	{
		if(vis[child] == 0)
			dfs(child, p);
	}
}

bool solve(int v, int e, vector<vector<int>> graph) 
{
	for(int i = 0; i < v; i++)
		vis[i] = 0;
		
	dfs(0, adj);
	
	for(int i =0; i < v; i++)
		if(vis[i] == 0)
			return false;
	
	for(int i = 0; i < e; i++)
		radj[graph[i][1]].push_back(graph[i][0]);
		
	for(int i =0; i < v ;i++)
		vis[i] = 0;
		
	dfs(0, radj);
	
	for(int i = 0; i < v; i++)
	{
		if(vis[i] == 0)
			return false;
	}
	return true;
	
}

int main() {
	
	int v, e;
	cin >> v >> e;
	
	/* 
	5 6
	0 1
	1 2
	2 3
	3 0
	2 4
	4 2
	*/
	
	vector<vector<int>> graph;
	
	for(int i = 0; i < e; i++)
	{
	    int src, dest;
	    cin >>  src >> dest;
	    
	    graph.push_back({src, dest});
	}
	
	for(int i = 0; i < e; i++)
	    adj[graph[i][0]].push_back(graph[i][1]);


	if(solve(v, e, graph) == 1)
		cout << "Graph is Strongly Connected\n";
		
	else
		cout << "Graph is Not Strongly Connected\n";
	
	return 0;
}
