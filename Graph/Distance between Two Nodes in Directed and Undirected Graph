#include <bits/stdc++.h>
using namespace std;

#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define ll long long
#define pb push_back

const int MOD = 1e9 + 7;


void addEdge(vector<int> adj[], int u, int w)
{
    //For directed graph
    adj[u].push_back(w);
  
    //Include Both for undirected graph
    adj[w].push_back(u);  
}


void isConnected(vector<int> adj[], int src, vector<bool> &visited, vector<int> &dist)
{
	queue<int> mq;

	visited[src] =  true;
	dist[src] = 0;
	mq.push(src);

	while (!mq.empty())
	{
		int u = mq.front();
		mq.pop();


		for (int i : adj[u] )
		{
			if (!visited[i])
			{
				visited[i] = true;
				dist[i] = dist[u] + 1;
				mq.push(i);
			}
		}
	}
	
	
}


int main()
{
    int V = 8;
    
    vector<int> adj[V];
    addEdge(adj, 0, 1);
	addEdge(adj, 0, 3);
	addEdge(adj, 1, 2);

	addEdge(adj, 3, 4);
	addEdge(adj, 3, 7);
	addEdge(adj, 4, 5);
	addEdge(adj, 4, 6);
	addEdge(adj, 4, 7);
	addEdge(adj, 5, 6);
	addEdge(adj, 6, 7);
	
	vector<bool> visited(V, false);
	vector<int> dist(V, INT_MAX);
	
	
	int src = 0;

	isConnected(adj, src, visited, dist);

	cout<< dist[7] <<" ";

	return 0;
}
