#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
        int data;
        Node* left;
        Node* right;
        int height;
};
Node* newNode(int item)
{
    Node* temp = new Node;
    temp->data = item;
    
    temp->left = temp->right = NULL;
    temp->height = 1;
    return temp;
}
int max(int a, int b)
{
    return (a < b ) ? b : a;
}
int height(Node* N)
{
    if(N == NULL)
        return 0;

    return N->height;
}
int getBalance(Node* N)
{
    if(N == NULL)  
        return 0;
        
    return(height(N->left) - height(N->right));
}
Node* rightRotate(Node* y)
{
    Node* x = y->left;
    Node* T2 = x->right;
    
    // Perform Rotation
    x->right = y;
    y->left = T2;
    
    // Updating Heights
    x->height = max(  height(x->left), height(x->right) ) + 1;
    y->height = max(  height(y->left), height(y->right) ) + 1;
    
    // Return new root;
    return x;
    
}
Node* leftRotate(Node* x)
{
    Node* y = x->right;
    Node* T2  = y->left;

    y->left = x;
    x->right = T2;
    
    
    x->height = max(height(x->left), height(x->right)) + 1;
    
    y->height = max(height(y->left), height(y->right)) + 1;
    
    return y;
}



Node* insert(Node* root, int key)
{
    if(root == NULL)
        return newNode(key);
        
    if(key < root->data)
        root->left = insert(root->left, key);
        
    else if(key > root->data)
        root->right = insert(root->right, key);
        
    else
        return root;
        
        
    root->height = max( height(root->left), height(root->right) ) + 1;
    
    int balance = getBalance(root);
    
    // If node becomes unbalanced 
    
    // Left left case
    if(balance >  1 && root->left->data > key)
        return rightRotate(root);
        
    // Left right Case
    if(balance > 1  && root->left->data  < key)
    {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    
    // Right Right Case
    if(balance < -1 && root->right->data < key)
    {
        return leftRotate(root);
    }
    // Right Left Case
    if(balance < -1 && root->right->data > key)
    {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}

void preOrder(Node* root)
{
    if(!root)
        return;
        
    cout<< root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}
int main()
{
    Node* root = NULL;
    root = insert(root, 10);  
    root = insert(root, 20);  
    root = insert(root, 30);  
    root = insert(root, 40);  
    root = insert(root, 50);  
    root = insert(root, 25);  
    
    preOrder(root); 
    
    return 0;
}
